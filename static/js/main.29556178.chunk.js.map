{"version":3,"sources":["components/TodoForm.js","components/ToDo.js","components/ToDoList.js","App.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","event","target","className","onSubmit","e","preventDefault","id","Math","floor","random","text","type","placeholder","name","onChange","ref","ToDo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","onClick","ToDoList","setTodos","newTodos","test","updatedTodos","removeARR","filter","todoId","newValue","prev","item","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNA4DeA,MA1Df,SAAkBC,GAChB,MAA0BC,mBAASD,EAAME,KAAOF,EAAME,KAAKC,MAAQ,IAAnE,mBAAOC,EAAP,KAAcC,EAAd,KAEMC,EAAWC,iBAAO,MAExBC,qBAAU,WACRF,EAASG,QAAQC,WAGnB,IAAMC,EAAe,SAACC,GACpBP,EAASO,EAAMC,OAAOV,QAgBxB,OACE,sBAAMW,UAAU,YAAYC,SAbT,SAACC,GACpBA,EAAEC,iBAGFjB,EAAMe,SAAS,CACbG,GAAIC,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBC,KAAMlB,IAGRC,EAAS,KAIT,SACGL,EAAME,KACL,qCACE,uBACEqB,KAAK,OACLC,YAAY,iBACZrB,MAAOC,EACPqB,KAAK,OACLX,UAAU,aACVY,SAAUf,EACVgB,IAAKrB,IAEP,wBAAQQ,UAAU,cAAlB,uBAGF,qCACE,uBAEEU,YAAY,4CACZrB,MAAOC,EACPqB,KAAK,OACLX,UAAU,aACVY,SAAUf,EACVgB,IAAKrB,IAEP,wBAAQQ,UAAU,cAAlB,8B,eCTKc,MAxCf,YAAgE,IAAhDC,EAA+C,EAA/CA,MAAOC,EAAwC,EAAxCA,aAAcC,EAA0B,EAA1BA,WAAYC,EAAc,EAAdA,WAC/C,EAAwB/B,mBAAS,CAC/BiB,GAAI,KACJf,MAAO,KAFT,mBAAOD,EAAP,KAAa+B,EAAb,KAaA,OAAI/B,EAAKgB,GACA,cAAC,EAAD,CAAUhB,KAAMA,EAAMa,SATV,SAACZ,GACpB6B,EAAW9B,EAAKgB,GAAIf,GACpB8B,EAAQ,CACNf,GAAI,KACJf,MAAO,QAQJ0B,EAAMK,KAAI,SAACC,EAAMC,GAAP,OACf,sBACEtB,UAAWqB,EAAKE,WAAa,oBAAsB,WADrD,UAIE,qBAAmBC,QAAS,kBAAMR,EAAaK,EAAKjB,KAApD,SACGiB,EAAKb,MADEa,EAAKjB,IAGf,sBAAKJ,UAAU,QAAf,UACE,cAAC,IAAD,CACEwB,QAAS,kBAAMP,EAAWI,EAAKjB,KAC/BJ,UAAU,gBAEZ,cAAC,IAAD,CACEwB,QAAS,kBAAML,EAAQ,CAAEf,GAAIiB,EAAKjB,GAAIf,MAAOgC,EAAKb,QAClDR,UAAU,mBAZTsB,OC8BIG,MApDf,WACE,MAA0BtC,mBAAS,IAAnC,mBAAO4B,EAAP,KAAcW,EAAd,KAqCA,OACE,gCACE,sDACA,cAAC,EAAD,CAAUzB,SAtCE,SAACoB,GACf,IAAMM,EAAQ,CAAIN,GAAJ,mBAAaN,IAEtBM,EAAKb,OAAQ,QAAQoB,KAAKP,EAAKb,OAGpCkB,EAASC,MAiCP,cAAC,EAAD,CACEZ,MAAOA,EACPC,aAhBe,SAACZ,GACpB,IAAIyB,EAAed,EAAMK,KAAI,SAACC,GAI5B,OAHIA,EAAKjB,KAAOA,IACdiB,EAAKE,YAAcF,EAAKE,YAEnBF,KAETK,EAASG,IAULZ,WAvBa,SAACb,GAClB,IAAM0B,EAAY,YAAIf,GAAOgB,QAAO,SAACV,GAAD,OAAUA,EAAKjB,KAAOA,KAE1DsB,EAASI,IAqBLZ,WAlCa,SAACc,EAAQC,GACrBA,EAASzB,OAAQ,QAAQoB,KAAKK,EAASzB,OAI5CkB,GAAS,SAACQ,GAAD,OACPA,EAAKd,KAAI,SAACe,GAAD,OAAWA,EAAK/B,KAAO4B,EAASC,EAAWE,eCX3CC,MARf,WACE,OACE,qBAAKpC,UAAU,WAAf,SACE,cAAC,EAAD,OCFNqC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.29556178.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\n\nfunction TodoForm(props) {\n  const [input, setInput] = useState(props.edit ? props.edit.value : \"\");\n  //use Ref puts the focus directly inside the input field\n  const inputRef = useRef(null);\n\n  useEffect(() => {\n    inputRef.current.focus();\n  });\n\n  const handleChange = (event) => {\n    setInput(event.target.value);\n    //Thus e.target.value is the value property of some DOM element, in this case that means the text entered in the search input\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    //The event.preventDefault() method stops the default action of an element from happening.\n\n    props.onSubmit({\n      id: Math.floor(Math.random() * 10000),\n      text: input,\n    });\n\n    setInput(\"\");\n  };\n\n  return (\n    <form className=\"todo-form\" onSubmit={handleSubmit}>\n      {props.edit ? (\n        <>\n          <input\n            type=\"text\"\n            placeholder=\"Was vergessen?\"\n            value={input}\n            name=\"text\"\n            className=\"todo-input\"\n            onChange={handleChange}\n            ref={inputRef}\n          />\n          <button className=\"todo-button\">Update</button>\n        </>\n      ) : (\n        <>\n          <input\n            //type=\"text\"\n            placeholder=\"Walk the car!...wash the dog...your turn!\"\n            value={input}\n            name=\"text\"\n            className=\"todo-input\"\n            onChange={handleChange}\n            ref={inputRef}\n          />\n          <button className=\"todo-button\">Trau Dich!</button>\n        </>\n      )}\n    </form>\n  );\n}\nexport default TodoForm;\n","import React, { useState } from \"react\";\nimport TodoForm from \"./TodoForm\";\nimport { RiCloseCircleLine } from \"react-icons/ri\";\nimport { TiEdit } from \"react-icons/ti\";\n\nfunction ToDo({ todos, completeTodo, removeTodo, updateTodo }) {\n  const [edit, setEdit] = useState({\n    id: null,\n    value: \"\",\n  });\n\n  const submitUpdate = (value) => {\n    updateTodo(edit.id, value);\n    setEdit({\n      id: null,\n      value: \"\",\n    });\n  };\n\n  if (edit.id) {\n    return <TodoForm edit={edit} onSubmit={submitUpdate} />;\n  }\n\n  return todos.map((todo, index) => (\n    <div\n      className={todo.isComplete ? \"todo-row complete\" : \"todo-row\"}\n      key={index}\n    >\n      <div key={todo.id} onClick={() => completeTodo(todo.id)}>\n        {todo.text}\n      </div>\n      <div className=\"icons\">\n        <RiCloseCircleLine\n          onClick={() => removeTodo(todo.id)}\n          className=\"delete-icon\"\n        />\n        <TiEdit\n          onClick={() => setEdit({ id: todo.id, value: todo.text })}\n          className=\"edit-icon\"\n        />\n      </div>\n    </div>\n  ));\n}\n\nexport default ToDo;\n","import React, { useState } from \"react\";\nimport TodoForm from \"./TodoForm\";\nimport ToDo from \"./ToDo\";\n\nfunction ToDoList() {\n  const [todos, setTodos] = useState([]);\n\n  const addTodo = (todo) => {\n    const newTodos = [todo, ...todos];\n    //this function is to delete spaces in the input\n    if (!todo.text || /^\\s*$/.test(todo.text)) {\n      return;\n    }\n    setTodos(newTodos);\n  };\n  //edit button//\n  const updateTodo = (todoId, newValue) => {\n    if (!newValue.text || /^\\s*$/.test(newValue.text)) {\n      return;\n    }\n\n    setTodos((prev) =>\n      prev.map((item) => (item.id === todoId ? newValue : item))\n    );\n  };\n  //remove Button//\n  const removeTodo = (id) => {\n    const removeARR = [...todos].filter((todo) => todo.id !== id);\n\n    setTodos(removeARR);\n  };\n\n  const completeTodo = (id) => {\n    let updatedTodos = todos.map((todo) => {\n      if (todo.id === id) {\n        todo.isComplete = !todo.isComplete;\n      }\n      return todo;\n    });\n    setTodos(updatedTodos);\n  };\n\n  return (\n    <div>\n      <h1>Was liegt heute an? </h1>\n      <TodoForm onSubmit={addTodo} />\n      <ToDo\n        todos={todos}\n        completeTodo={completeTodo}\n        removeTodo={removeTodo}\n        updateTodo={updateTodo}\n      />\n    </div>\n  );\n}\n\nexport default ToDoList;\n","import \"./App.css\";\nimport ToDoList from \"./components/ToDoList\";\n\nfunction App() {\n  return (\n    <div className=\"todo-app\">\n      <ToDoList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}