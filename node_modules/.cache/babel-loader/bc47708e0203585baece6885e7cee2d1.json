{"ast":null,"code":"import _toConsumableArray from\"/Users/reginabrand/Git/to-do-list-new/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/Users/reginabrand/Git/to-do-list-new/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from\"react\";import TodoForm from\"./TodoForm\";import ToDo from\"./ToDo\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function ToDoList(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),todos=_useState2[0],setTodos=_useState2[1];var addTodo=function addTodo(todo){var newTodos=[todo].concat(_toConsumableArray(todos));//this function is to delete spaces in the input\nif(!todo.text||/^\\s*$/.test(todo.text)){return;}setTodos(newTodos);};//edit button//\nvar updateTodo=function updateTodo(todoId,newValue){if(!newValue.text||/^\\s*$/.test(newValue.text)){return;}setTodos(function(prev){return prev.map(function(item){return item.id===todoId?newValue:item;});});};//remove Button//\nvar removeTodo=function removeTodo(id){var removeARR=_toConsumableArray(todos).filter(function(todo){return todo.id!==id;});setTodos(removeARR);};var completeTodo=function completeTodo(id){var updatedTodos=todos.map(function(todo){if(todo.id===id){todo.isComplete=!todo.isComplete;}return todo;});setTodos(updatedTodos);};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Was liegt heute an? \"}),/*#__PURE__*/_jsx(TodoForm,{onSubmit:addTodo}),/*#__PURE__*/_jsx(ToDo,{todos:todos,completeTodo:completeTodo,removeTodo:removeTodo,updateTodo:updateTodo})]});}export default ToDoList;","map":{"version":3,"sources":["/Users/reginabrand/Git/to-do-list-new/src/components/ToDoList.js"],"names":["React","useState","TodoForm","ToDo","ToDoList","todos","setTodos","addTodo","todo","newTodos","text","test","updateTodo","todoId","newValue","prev","map","item","id","removeTodo","removeARR","filter","completeTodo","updatedTodos","isComplete"],"mappings":"gUAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,MAAOC,CAAAA,QAAP,KAAqB,YAArB,CACA,MAAOC,CAAAA,IAAP,KAAiB,QAAjB,C,wFAEA,QAASC,CAAAA,QAAT,EAAoB,CAClB,cAA0BH,QAAQ,CAAC,EAAD,CAAlC,wCAAOI,KAAP,eAAcC,QAAd,eAEA,GAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACC,IAAD,CAAU,CACxB,GAAMC,CAAAA,QAAQ,EAAID,IAAJ,4BAAaH,KAAb,EAAd,CACA;AACA,GAAI,CAACG,IAAI,CAACE,IAAN,EAAc,QAAQC,IAAR,CAAaH,IAAI,CAACE,IAAlB,CAAlB,CAA2C,CACzC,OACD,CACDJ,QAAQ,CAACG,QAAD,CAAR,CACD,CAPD,CAQA;AACA,GAAMG,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,MAAD,CAASC,QAAT,CAAsB,CACvC,GAAI,CAACA,QAAQ,CAACJ,IAAV,EAAkB,QAAQC,IAAR,CAAaG,QAAQ,CAACJ,IAAtB,CAAtB,CAAmD,CACjD,OACD,CAEDJ,QAAQ,CAAC,SAACS,IAAD,QACPA,CAAAA,IAAI,CAACC,GAAL,CAAS,SAACC,IAAD,QAAWA,CAAAA,IAAI,CAACC,EAAL,GAAYL,MAAZ,CAAqBC,QAArB,CAAgCG,IAA3C,EAAT,CADO,EAAD,CAAR,CAGD,CARD,CASA;AACA,GAAME,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACD,EAAD,CAAQ,CACzB,GAAME,CAAAA,SAAS,CAAG,mBAAIf,KAAJ,EAAWgB,MAAX,CAAkB,SAACb,IAAD,QAAUA,CAAAA,IAAI,CAACU,EAAL,GAAYA,EAAtB,EAAlB,CAAlB,CAEAZ,QAAQ,CAACc,SAAD,CAAR,CACD,CAJD,CAMA,GAAME,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACJ,EAAD,CAAQ,CAC3B,GAAIK,CAAAA,YAAY,CAAGlB,KAAK,CAACW,GAAN,CAAU,SAACR,IAAD,CAAU,CACrC,GAAIA,IAAI,CAACU,EAAL,GAAYA,EAAhB,CAAoB,CAClBV,IAAI,CAACgB,UAAL,CAAkB,CAAChB,IAAI,CAACgB,UAAxB,CACD,CACD,MAAOhB,CAAAA,IAAP,CACD,CALkB,CAAnB,CAMAF,QAAQ,CAACiB,YAAD,CAAR,CACD,CARD,CAUA,mBACE,oCACE,4CADF,cAEE,KAAC,QAAD,EAAU,QAAQ,CAAEhB,OAApB,EAFF,cAGE,KAAC,IAAD,EACE,KAAK,CAAEF,KADT,CAEE,YAAY,CAAEiB,YAFhB,CAGE,UAAU,CAAEH,UAHd,CAIE,UAAU,CAAEP,UAJd,EAHF,GADF,CAYD,CAED,cAAeR,CAAAA,QAAf","sourcesContent":["import React, { useState } from \"react\";\nimport TodoForm from \"./TodoForm\";\nimport ToDo from \"./ToDo\";\n\nfunction ToDoList() {\n  const [todos, setTodos] = useState([]);\n\n  const addTodo = (todo) => {\n    const newTodos = [todo, ...todos];\n    //this function is to delete spaces in the input\n    if (!todo.text || /^\\s*$/.test(todo.text)) {\n      return;\n    }\n    setTodos(newTodos);\n  };\n  //edit button//\n  const updateTodo = (todoId, newValue) => {\n    if (!newValue.text || /^\\s*$/.test(newValue.text)) {\n      return;\n    }\n\n    setTodos((prev) =>\n      prev.map((item) => (item.id === todoId ? newValue : item))\n    );\n  };\n  //remove Button//\n  const removeTodo = (id) => {\n    const removeARR = [...todos].filter((todo) => todo.id !== id);\n\n    setTodos(removeARR);\n  };\n\n  const completeTodo = (id) => {\n    let updatedTodos = todos.map((todo) => {\n      if (todo.id === id) {\n        todo.isComplete = !todo.isComplete;\n      }\n      return todo;\n    });\n    setTodos(updatedTodos);\n  };\n\n  return (\n    <div>\n      <h1>Was liegt heute an? </h1>\n      <TodoForm onSubmit={addTodo} />\n      <ToDo\n        todos={todos}\n        completeTodo={completeTodo}\n        removeTodo={removeTodo}\n        updateTodo={updateTodo}\n      />\n    </div>\n  );\n}\n\nexport default ToDoList;\n"]},"metadata":{},"sourceType":"module"}